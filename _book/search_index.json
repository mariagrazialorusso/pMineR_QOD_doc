[["index.html", "pMineR:QoD inspector class 1 Class Introduction", " pMineR:QoD inspector class PM liquid lab 2023-02-03 1 Class Introduction The Qod class provides methods for performing preliminary analyses on the data. library(pMineR) objDL&lt;-dataLoader() objDL$load.csv(nomeFile = &quot;EventLog1.csv&quot;,IDName = &quot;ID&quot;,EVENTName = &quot;Event&quot;,dateColumnName = &quot;Date&quot;,format.column.date = &quot;%Y-%m-%d&quot;) obj.out&lt;-objDL$getData() objQOD&lt;-QOD() objQOD$loadDataset(dataList = obj.out) "],["co-occurrence-analysis-eventheatmap.html", "2 Co-occurrence Analysis: eventHeatmap()", " 2 Co-occurrence Analysis: eventHeatmap() The eventHeatmap() function allows to display a heatmap showing the co-occurrence of events: objQOD$eventHeatmap(threshold.low = 0,threshold.hi = 1) Each cell ci,j of the matrix, indicates the number of times the event in row-i and column-j appear in the same trace out of the total number of times the event in row-i occurs. "],["path-matching-query-function.html", "3 Path matching: query() function", " 3 Path matching: query() function The query() functions allows to extract a certain sub-portion of the event Log, corresponding to cases whose trace meets specific requirements specified in the function input. These requirements refer to certain features that the trace must reflect: from : The starting event; to : The ending event; time.range and UM: The time between the two events and its unit of time measurement (whether in hours, days, weeks, months, or years); arr.passingThrough : events should have occurred between the from event and the to event arr.NOTpassingThrough : events should not have occurred between the from event and the to event step.range: the min and max number of events should have occurred between the from event and the to event the query() function allows for two different types of output, according to the value of the returnCompleteMatrix. If it is setted to TRUE, the function returns a matrix containing the following informations: ID (first column) : the casse-ID whose trace matches the specified requirements; The from and to columns explicit the cardinality that the start and end of the pattern hold within the trace. The step column indicates the number of events that lie between from and to event. The time column indicates the duration between from and to event objQOD$query(from = &quot;Biopsy&quot;, to = &quot;death&quot;, time.range = c(0,20), UM = &quot;days&quot;, returnCompleteMatrix = T) ## from to step time valid ## [1,] &quot;14&quot; &quot;6&quot; &quot;8&quot; &quot;2&quot; &quot;9&quot; &quot;1&quot; ## [2,] &quot;16&quot; &quot;7&quot; &quot;9&quot; &quot;2&quot; &quot;12&quot; &quot;1&quot; ## [3,] &quot;23&quot; &quot;6&quot; &quot;8&quot; &quot;2&quot; &quot;17&quot; &quot;1&quot; ## [4,] &quot;30&quot; &quot;7&quot; &quot;8&quot; &quot;1&quot; &quot;11&quot; &quot;1&quot; ## [5,] &quot;40&quot; &quot;5&quot; &quot;7&quot; &quot;2&quot; &quot;19&quot; &quot;1&quot; ## [6,] &quot;65&quot; &quot;4&quot; &quot;6&quot; &quot;2&quot; &quot;5&quot; &quot;1&quot; ## [7,] &quot;69&quot; &quot;7&quot; &quot;9&quot; &quot;2&quot; &quot;10&quot; &quot;1&quot; ## [8,] &quot;79&quot; &quot;7&quot; &quot;9&quot; &quot;2&quot; &quot;19&quot; &quot;1&quot; ## [9,] &quot;90&quot; &quot;6&quot; &quot;8&quot; &quot;2&quot; &quot;13&quot; &quot;1&quot; ## [10,] &quot;99&quot; &quot;7&quot; &quot;8&quot; &quot;1&quot; &quot;1&quot; &quot;1&quot; If you want the function to return only an array with case IDs, the returnCompleteMatrix input must be setted to FALSE. array.ID&lt;-objQOD$query(from = &quot;Biopsy&quot;, to = &quot;death&quot;, time.range = c(0,20), UM = &quot;days&quot;, returnCompleteMatrix = F) print(array.ID) ## [1] &quot;14&quot; &quot;16&quot; &quot;23&quot; &quot;30&quot; &quot;40&quot; &quot;65&quot; &quot;69&quot; &quot;79&quot; &quot;90&quot; &quot;99&quot; "],["timeline-visualization-plottimeline-function.html", "4 Timeline visualization: plotTimeline() function", " 4 Timeline visualization: plotTimeline() function It is possible to visualize the temporal evolution of their traces through the visualization of a timeline. arr.ID&lt;-objQOD$plotTimeline(objDL.obj = obj.out, max.time = 20,UM = &quot;weeks&quot;) It is possible to filter the number of trace to plot by passing the function an array containing the IDs of the cases you want to investigate. objQOD$plotTimeline(objDL.obj = obj.out, max.time = 20,UM = &quot;weeks&quot;,arr.ID = array.ID) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
